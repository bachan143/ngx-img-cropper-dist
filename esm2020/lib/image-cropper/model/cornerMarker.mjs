import { Handle } from './handle';
export class CornerMarker extends Handle {
    constructor(x, y, radius, cropperSettings) {
        super(x, y, radius, cropperSettings);
    }
    drawCornerBorder(ctx) {
        let sideLength = 10;
        if (this.over || this.drag) {
            sideLength = 12;
        }
        let hDirection = this.cropperSettings.markerSizeMultiplier;
        let vDirection = this.cropperSettings.markerSizeMultiplier;
        if (this.horizontalNeighbour.position.x < this.position.x) {
            hDirection = -this.cropperSettings.markerSizeMultiplier;
        }
        if (this.verticalNeighbour.position.y < this.position.y) {
            vDirection = -this.cropperSettings.markerSizeMultiplier;
        }
        ctx.beginPath();
        if (this.cropperSettings.cropperDrawSettings.lineDash) {
            ctx.setLineDash([1, 3]);
        }
        ctx.lineJoin = 'miter';
        ctx.moveTo(this.position.x + this.offset.x, this.position.y + this.offset.y);
        ctx.lineTo(this.position.x + this.offset.x + sideLength * hDirection, this.position.y + this.offset.y);
        ctx.lineTo(this.position.x + this.offset.x + sideLength * hDirection, this.position.y + this.offset.y + sideLength * vDirection);
        ctx.lineTo(this.position.x + this.offset.x, this.position.y + this.offset.y + sideLength * vDirection);
        ctx.lineTo(this.position.x + this.offset.x, this.position.y + this.offset.y);
        ctx.closePath();
        ctx.lineWidth = this.cropperSettings.cropperDrawSettings.strokeWidth;
        ctx.strokeStyle =
            this.cropperSettings.cropperDrawSettings.strokeColor ||
                'rgba(255,255,255,.7)';
        ctx.stroke();
    }
    drawCornerFill(ctx) {
        let sideLength = 10;
        if (this.over || this.drag) {
            sideLength = 12;
        }
        let hDirection = this.cropperSettings.markerSizeMultiplier;
        let vDirection = this.cropperSettings.markerSizeMultiplier;
        if (this.horizontalNeighbour.position.x < this.position.x) {
            hDirection = -this.cropperSettings.markerSizeMultiplier;
        }
        if (this.verticalNeighbour.position.y < this.position.y) {
            vDirection = -this.cropperSettings.markerSizeMultiplier;
        }
        if (this.cropperSettings.rounded) {
            const width = this.position.x - this.horizontalNeighbour.position.x;
            const height = this.position.y - this.verticalNeighbour.position.y;
            const offX = Math.round(Math.sin(Math.PI / 2) * Math.abs(width / 2)) / 4;
            const offY = Math.round(Math.sin(Math.PI / 2) * Math.abs(height / 2)) / 4;
            this.offset.x = hDirection > 0 ? offX : -offX;
            this.offset.y = vDirection > 0 ? offY : -offY;
        }
        else {
            this.offset.x = 0;
            this.offset.y = 0;
        }
        ctx.beginPath();
        if (this.cropperSettings.cropperDrawSettings.lineDash) {
            ctx.setLineDash([1, 3]);
        }
        ctx.moveTo(this.position.x + this.offset.x, this.position.y + this.offset.y);
        ctx.lineTo(this.position.x + this.offset.x + sideLength * hDirection, this.position.y + this.offset.y);
        ctx.lineTo(this.position.x + this.offset.x + sideLength * hDirection, this.position.y + this.offset.y + sideLength * vDirection);
        ctx.lineTo(this.position.x + this.offset.x, this.position.y + this.offset.y + sideLength * vDirection);
        ctx.lineTo(this.position.x + this.offset.x, this.position.y + this.offset.y);
        ctx.closePath();
        ctx.fillStyle =
            this.cropperSettings.cropperDrawSettings.fillColor ||
                'rgba(255,255,255,.7)';
        ctx.fill();
    }
    moveX(x) {
        this.setPosition(x, this.position.y);
    }
    moveY(y) {
        this.setPosition(this.position.x, y);
    }
    move(x, y) {
        this.setPosition(x, y);
        this.verticalNeighbour.moveX(x);
        this.horizontalNeighbour.moveY(y);
    }
    addHorizontalNeighbour(neighbour) {
        this.horizontalNeighbour = neighbour;
    }
    addVerticalNeighbour(neighbour) {
        this.verticalNeighbour = neighbour;
    }
    getHorizontalNeighbour() {
        return this.horizontalNeighbour;
    }
    getVerticalNeighbour() {
        return this.verticalNeighbour;
    }
    draw(ctx) {
        this.drawCornerFill(ctx);
        this.drawCornerBorder(ctx);
    }
}
//# sourceMappingURL=data:application/json;base64,