import { Point } from './point';
import { CropperSettings } from '../cropper-settings';
export class Handle {
    constructor(x, y, radius, settings) {
        this.cropperSettings = new CropperSettings();
        this.over = false;
        this.drag = false;
        this._position = new Point(x, y);
        this.offset = new Point(0, 0);
        this.radius = radius;
        this.cropperSettings = settings;
    }
    setDrag(value) {
        this.drag = value;
        this.setOver(value);
    }
    draw(ctx) {
        // this should't be empty
    }
    setOver(over) {
        this.over = over;
    }
    touchInBounds(x, y) {
        return (x > this.position.x - this.radius + this.offset.x &&
            x < this.position.x + this.radius + this.offset.x &&
            y > this.position.y - this.radius + this.offset.y &&
            y < this.position.y + this.radius + this.offset.y);
    }
    get position() {
        return this._position;
    }
    setPosition(x, y) {
        this._position.x = x;
        this._position.y = y;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFuZGxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWltZy1jcm9wcGVyL3NyYy9saWIvaW1hZ2UtY3JvcHBlci9tb2RlbC9oYW5kbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNoQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFnQnRELE1BQU0sT0FBTyxNQUFNO0lBVWpCLFlBQVksQ0FBUyxFQUFFLENBQVMsRUFBRSxNQUFjLEVBQUUsUUFBeUI7UUFGcEUsb0JBQWUsR0FBb0IsSUFBSSxlQUFlLEVBQUUsQ0FBQztRQUc5RCxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztRQUNsQixJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztRQUNsQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsZUFBZSxHQUFHLFFBQVEsQ0FBQztJQUNsQyxDQUFDO0lBRU0sT0FBTyxDQUFDLEtBQWM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7UUFDbEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRU0sSUFBSSxDQUFDLEdBQTZCO1FBQ3ZDLHlCQUF5QjtJQUMzQixDQUFDO0lBRU0sT0FBTyxDQUFDLElBQWE7UUFDMUIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztJQUVNLGFBQWEsQ0FBQyxDQUFTLEVBQUUsQ0FBUztRQUN2QyxPQUFPLENBQ0wsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ2pELENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNqRCxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDakQsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQ2xELENBQUM7SUFDSixDQUFDO0lBRUQsSUFBVyxRQUFRO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDO0lBRU0sV0FBVyxDQUFDLENBQVMsRUFBRSxDQUFTO1FBQ3JDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNyQixJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdkIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUG9pbnQgfSBmcm9tICcuL3BvaW50JztcbmltcG9ydCB7IENyb3BwZXJTZXR0aW5ncyB9IGZyb20gJy4uL2Nyb3BwZXItc2V0dGluZ3MnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElIYW5kbGUge1xuICBvdmVyOiBib29sZWFuO1xuICBkcmFnOiBib29sZWFuO1xuICBwb3NpdGlvbjogUG9pbnQ7XG4gIG9mZnNldDogUG9pbnQ7XG4gIHJhZGl1czogbnVtYmVyO1xuICBjcm9wcGVyU2V0dGluZ3M6IENyb3BwZXJTZXR0aW5ncztcbiAgc2V0UG9zaXRpb24oeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkO1xuICBzZXREcmFnKHZhbHVlOiBib29sZWFuKTogdm9pZDtcbiAgZHJhdyhjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCk6IHZvaWQ7XG4gIHNldE92ZXIob3ZlcjogYm9vbGVhbik6IHZvaWQ7XG4gIHRvdWNoSW5Cb3VuZHMoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBib29sZWFuO1xufVxuXG5leHBvcnQgY2xhc3MgSGFuZGxlIGltcGxlbWVudHMgSUhhbmRsZSB7XG4gIHB1YmxpYyBvdmVyOiBib29sZWFuO1xuICBwdWJsaWMgZHJhZzogYm9vbGVhbjtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnZhcmlhYmxlLW5hbWVcbiAgcHJpdmF0ZSBfcG9zaXRpb246IFBvaW50O1xuICBwdWJsaWMgb2Zmc2V0OiBQb2ludDtcbiAgcHVibGljIHJhZGl1czogbnVtYmVyO1xuXG4gIHB1YmxpYyBjcm9wcGVyU2V0dGluZ3M6IENyb3BwZXJTZXR0aW5ncyA9IG5ldyBDcm9wcGVyU2V0dGluZ3MoKTtcblxuICBjb25zdHJ1Y3Rvcih4OiBudW1iZXIsIHk6IG51bWJlciwgcmFkaXVzOiBudW1iZXIsIHNldHRpbmdzOiBDcm9wcGVyU2V0dGluZ3MpIHtcbiAgICB0aGlzLm92ZXIgPSBmYWxzZTtcbiAgICB0aGlzLmRyYWcgPSBmYWxzZTtcbiAgICB0aGlzLl9wb3NpdGlvbiA9IG5ldyBQb2ludCh4LCB5KTtcbiAgICB0aGlzLm9mZnNldCA9IG5ldyBQb2ludCgwLCAwKTtcbiAgICB0aGlzLnJhZGl1cyA9IHJhZGl1cztcbiAgICB0aGlzLmNyb3BwZXJTZXR0aW5ncyA9IHNldHRpbmdzO1xuICB9XG5cbiAgcHVibGljIHNldERyYWcodmFsdWU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLmRyYWcgPSB2YWx1ZTtcbiAgICB0aGlzLnNldE92ZXIodmFsdWUpO1xuICB9XG5cbiAgcHVibGljIGRyYXcoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpIHtcbiAgICAvLyB0aGlzIHNob3VsZCd0IGJlIGVtcHR5XG4gIH1cblxuICBwdWJsaWMgc2V0T3ZlcihvdmVyOiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5vdmVyID0gb3ZlcjtcbiAgfVxuXG4gIHB1YmxpYyB0b3VjaEluQm91bmRzKHg6IG51bWJlciwgeTogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgIHggPiB0aGlzLnBvc2l0aW9uLnggLSB0aGlzLnJhZGl1cyArIHRoaXMub2Zmc2V0LnggJiZcbiAgICAgIHggPCB0aGlzLnBvc2l0aW9uLnggKyB0aGlzLnJhZGl1cyArIHRoaXMub2Zmc2V0LnggJiZcbiAgICAgIHkgPiB0aGlzLnBvc2l0aW9uLnkgLSB0aGlzLnJhZGl1cyArIHRoaXMub2Zmc2V0LnkgJiZcbiAgICAgIHkgPCB0aGlzLnBvc2l0aW9uLnkgKyB0aGlzLnJhZGl1cyArIHRoaXMub2Zmc2V0LnlcbiAgICApO1xuICB9XG5cbiAgcHVibGljIGdldCBwb3NpdGlvbigpOiBQb2ludCB7XG4gICAgcmV0dXJuIHRoaXMuX3Bvc2l0aW9uO1xuICB9XG5cbiAgcHVibGljIHNldFBvc2l0aW9uKHg6IG51bWJlciwgeTogbnVtYmVyKSB7XG4gICAgdGhpcy5fcG9zaXRpb24ueCA9IHg7XG4gICAgdGhpcy5fcG9zaXRpb24ueSA9IHk7XG4gIH1cbn1cbiJdfQ==